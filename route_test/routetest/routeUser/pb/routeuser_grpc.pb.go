// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: routeuser.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RouteUser_GetUser_FullMethodName = "/routetest.RouteUser/GetUser"
)

// RouteUserClient is the client API for RouteUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteUserClient interface {
	GetUser(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*Reply, error)
}

type routeUserClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteUserClient(cc grpc.ClientConnInterface) RouteUserClient {
	return &routeUserClient{cc}
}

func (c *routeUserClient) GetUser(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, RouteUser_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteUserServer is the server API for RouteUser service.
// All implementations must embed UnimplementedRouteUserServer
// for forward compatibility
type RouteUserServer interface {
	GetUser(context.Context, *Profile) (*Reply, error)
	mustEmbedUnimplementedRouteUserServer()
}

// UnimplementedRouteUserServer must be embedded to have forward compatible implementations.
type UnimplementedRouteUserServer struct {
}

func (UnimplementedRouteUserServer) GetUser(context.Context, *Profile) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedRouteUserServer) mustEmbedUnimplementedRouteUserServer() {}

// UnsafeRouteUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteUserServer will
// result in compilation errors.
type UnsafeRouteUserServer interface {
	mustEmbedUnimplementedRouteUserServer()
}

func RegisterRouteUserServer(s grpc.ServiceRegistrar, srv RouteUserServer) {
	s.RegisterService(&RouteUser_ServiceDesc, srv)
}

func _RouteUser_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteUserServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteUser_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteUserServer).GetUser(ctx, req.(*Profile))
	}
	return interceptor(ctx, in, info, handler)
}

// RouteUser_ServiceDesc is the grpc.ServiceDesc for RouteUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routetest.RouteUser",
	HandlerType: (*RouteUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _RouteUser_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "routeuser.proto",
}
